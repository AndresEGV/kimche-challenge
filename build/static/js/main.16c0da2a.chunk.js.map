{"version":3,"sources":["components/CountryFind.jsx","utils/lowerCase.js","components/SearchBar.jsx","graphql/countries.js","components/Header.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["CountryFind","country","continent","length","className","map","key","code","name","languages","lang","emoji","native","len","capital","lowerCase","inputString","toLowerCase","SearchBar","countries","useState","countrySearch","setCountrySearch","countryInput","setCountryInput","setContinent","language","setLanguage","useEffect","filterCountry","searchInput","result","filter","startsWith","includes","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","autoFocus","onClick","COUNTRIES","gql","Header","useQuery","data","loading","Home","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRA6DeA,EA3DK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC9B,OACE,6BACsB,IAAnBD,EAAQE,OACP,yBAAKC,UAAU,YAEf,yBAAKA,UAAU,4DACZH,EAAQI,KAAI,SAACJ,GAAD,OACX,yBAAKG,UAAU,GAAGE,IAAKL,EAAQM,MAC7B,yBAAKH,UAAU,uGACE,IAAdF,EACC,wBAAIE,UAAU,aACXH,EAAQC,UAAUM,KACnB,8BAGF,4BACGP,EAAQQ,UAAUJ,KAAI,SAACK,GAAD,OACrB,uBAAGN,UAAU,YAAYE,IAAKI,EAAKF,MAChCE,EAAKF,SAGV,8BAGJ,6BACE,4BACGP,EAAQU,MADX,IACmBV,EAAQO,MAE3B,4BAAKP,EAAQW,SACE,IAAdV,EACC,4BACE,0BAAME,UAAU,aAAhB,cACCH,EAAQQ,UAAUJ,KAAI,SAACQ,GAAD,OACrB,wBAAIP,IAAKO,EAAIL,MAAOK,EAAIL,UAI5B,2BACE,0BAAMJ,UAAU,aAAhB,eAEA,8BAAOH,EAAQC,UAAUM,OAG7B,6BACA,2BACE,0BAAMJ,UAAU,aAAhB,aACA,8BAAOH,EAAQa,mBCjD7BC,EAAY,SAACC,GAEjB,MAD8B,UAAGA,GAAcC,eCgGlCC,EA9FG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACOC,mBAAS,IADhB,mBAC5BC,EAD4B,KACbC,EADa,OAEKF,mBAAS,IAFd,mBAE5BG,EAF4B,KAEdC,EAFc,OAGDJ,mBAAS,MAHR,mBAG5BlB,EAH4B,KAGjBuB,EAHiB,OAIHL,mBAAS,MAJN,mBAI5BM,EAJ4B,KAIlBC,EAJkB,KAMnCC,qBAAU,WACU,OAAd1B,GACFuB,GAAa,KAEd,IAEH,IAKMI,EAAgB,SAACC,GACrB,IAAIC,EAASZ,EAAUa,QAAO,SAAC/B,GAC7B,GACEc,EAAUd,EAAQO,MAAMyB,WAAWlB,EAAUe,KAC7Cf,EAAUd,EAAQO,MAAM0B,SAASnB,EAAUe,IAE3C,OAAO7B,KAGXqB,EAAiBS,IAiBnB,OACE,6BACE,yBAAK3B,UAAU,0BAA0B+B,SAhBxB,SAACC,GACpBA,EAAEC,mBAgBE,6BACE,2BACEC,KAAK,OACLlC,UAAU,6CACVmC,YAAY,SACZC,MAAOjB,EACPkB,SAxCW,SAACL,GACpBZ,EAAgBY,EAAEM,OAAOF,OACzBX,EAAcO,EAAEM,OAAOF,QAuCfG,WAAS,MAKf,6BACE,yBAAKvC,UAAU,gEACb,wBAAIA,UAAU,2CAAd,YACY,KAEZ,yBAAKA,UAAU,IACb,4BACEkC,KAAK,SACLlC,UAAU,0EACVwC,QAlCU,WACpBnB,GAAa,GACbE,EAAY,QA6BJ,cAQF,6BACE,4BACEvB,UAAU,qEACVkC,KAAK,SACLM,QAtCS,WACnBjB,GAAY,GACZF,EAAa,QAiCL,eAUN,6BACE,kBAAC,EAAD,CACExB,QAASoB,EACTnB,UAAWA,EACXwB,SAAUA,O,wWCxFpB,IAwBemB,E,MAxBGC,GAAH,K,QCiBAC,EAdA,WAAO,IAAD,EACOC,YAASH,GAA3BI,EADW,EACXA,KAAMC,EADK,EACLA,QAEd,OACE,yBAAK9C,UAAU,wBACb,wBAAIA,UAAU,4CAAd,kBAIC8C,EAAU,wCAAmB,kBAAC,EAAD,CAAW/B,UAAS,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAM9B,cCGjDgC,EAdF,WACX,OACE,yBAAK/C,UAAU,gDACb,yBAAKA,UAAU,gFACb,yBAAKA,UAAU,0BACb,wBAAIA,UAAU,qCAAd,aACA,yBAAKA,UAAU,0BAGnB,kBAAC,EAAD,QCPAgD,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCAUQC,EAPH,kBACV,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,6BACE,kBAAC,EAAD,SCAcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.16c0da2a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CountryFind = ({ country, continent }) => {\r\n  return (\r\n    <div>\r\n      {country.length === 0 ? (\r\n        <div className=\"w-11/12\"></div>\r\n      ) : (\r\n        <div className=\"mt-20 flex flex-wrap justify-center align-center m-auto \">\r\n          {country.map((country) => (\r\n            <div className=\"\" key={country.code}>\r\n              <div className=\"w-80 h-80 p-10 m-10 border-solid border-2 rounded-2xl bg-gray-100 text-blue-900 box-border text-xl\">\r\n                {continent === true ? (\r\n                  <h2 className=\"font-bold\">\r\n                    {country.continent.name}\r\n                    <hr />\r\n                  </h2>\r\n                ) : (\r\n                  <h2>\r\n                    {country.languages.map((lang) => (\r\n                      <p className=\"font-bold\" key={lang.name}>\r\n                        {lang.name}\r\n                      </p>\r\n                    ))}\r\n                    <hr />\r\n                  </h2>\r\n                )}\r\n                <div>\r\n                  <h3>\r\n                    {country.emoji} {country.name}\r\n                  </h3>\r\n                  <h4>{country.native}</h4>\r\n                  {continent === true ? (\r\n                    <ul>\r\n                      <span className=\"font-bold\">Languages:</span>\r\n                      {country.languages.map((len) => (\r\n                        <li key={len.name}>{len.name}</li>\r\n                      ))}\r\n                    </ul>\r\n                  ) : (\r\n                    <p>\r\n                      <span className=\"font-bold\">Continent: </span>\r\n\r\n                      <span>{country.continent.name}</span>\r\n                    </p>\r\n                  )}\r\n                  <hr />\r\n                  <p>\r\n                    <span className=\"font-bold\">Capital: </span>\r\n                    <span>{country.capital}</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryFind;\r\n","const lowerCase = (inputString) => {\r\n  const textFormatInLowerCase = `${inputString}`.toLowerCase();\r\n  return textFormatInLowerCase;\r\n};\r\n\r\nexport { lowerCase };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CountryFind from \"../components/CountryFind\";\r\nimport { lowerCase } from \"../utils/lowerCase\";\r\nconst SearchBar = ({ countries }) => {\r\n  const [countrySearch, setCountrySearch] = useState([]);\r\n  const [countryInput, setCountryInput] = useState([]);\r\n  const [continent, setContinent] = useState(null);\r\n  const [language, setLanguage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (continent === null) {\r\n      setContinent(true);\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setCountryInput(e.target.value);\r\n    filterCountry(e.target.value);\r\n  };\r\n\r\n  const filterCountry = (searchInput) => {\r\n    let result = countries.filter((country) => {\r\n      if (\r\n        lowerCase(country.name).startsWith(lowerCase(searchInput)) &&\r\n        lowerCase(country.name).includes(lowerCase(searchInput))\r\n      ) {\r\n        return country;\r\n      }\r\n    });\r\n    setCountrySearch(result);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const showContinent = () => {\r\n    setContinent(true);\r\n    setLanguage(null);\r\n  };\r\n\r\n  const showLanguage = () => {\r\n    setLanguage(true);\r\n    setContinent(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"w-80 m-auto text-center\" onSubmit={handleSubmit}>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            className=\" mt-6 pl-10 p-2 shadow-md rounded-md w-1/3\"\r\n            placeholder=\"Search\"\r\n            value={countryInput}\r\n            onChange={handleChange}\r\n            autoFocus\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <div className=\"w-80 m-auto flex flex-wrap justify-center items-center mt-16\">\r\n          <h2 className=\"font-bold text-2xl mr-5 text-indigo-800\">\r\n            Group By:{\" \"}\r\n          </h2>\r\n          <div className=\"\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"px-2 py-3 bg-indigo-900 mr-2 rounded-2xl text-white hover:bg-purple-700\"\r\n              onClick={showContinent}\r\n            >\r\n              Continent\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className=\"px-2 py-3 bg-indigo-900 rounded-2xl text-white hover:bg-purple-700\"\r\n              type=\"button\"\r\n              onClick={showLanguage}\r\n            >\r\n              Language\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <CountryFind\r\n          country={countrySearch}\r\n          continent={continent}\r\n          language={language}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import gql from \"graphql-tag\";\r\n\r\nconst COUNTRIES = gql`\r\n  query {\r\n    countries {\r\n      name\r\n      code\r\n      native\r\n      capital\r\n      continent {\r\n        name\r\n      }\r\n      languages {\r\n        code\r\n        name\r\n        native\r\n      }\r\n      emoji\r\n      emojiU\r\n      states {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default COUNTRIES;\r\n","import React from \"react\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport COUNTRIES from \"../graphql/countries\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\nconst Header = () => {\r\n  const { data, loading } = useQuery(COUNTRIES);\r\n\r\n  return (\r\n    <div className=\"text-center h-screen\">\r\n      <h1 className=\"text-4xl font-bold mb-10 text-indigo-900\">\r\n        Country Search\r\n      </h1>\r\n\r\n      {loading ? <p>loading..</p> : <SearchBar countries={data?.countries} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Header from \"../components/Header\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"bg-gray-100 dark:bg-gray-800 dark:text-white\">\r\n      <div className=\"w-screen shadow-md py-6 px-3 bg-white dark:bg-gray-700 dark:text-white mb-16\">\r\n        <div className=\"flex container mx-auto\">\r\n          <h1 className=\"font-bold text-xl text-indigo-900\">Countries</h1>\r\n          <div className=\"ml-auto font-medium\"></div>\r\n        </div>\r\n      </div>\r\n      <Header />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Home from \"./pages/Home\";\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <div>\n      <Home />\n    </div>\n  </ApolloProvider>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}